(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{95:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=s(o(3)),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};r.get||r.set?Object.defineProperty(t,o,r):t[o]=e[o]}return t.default=e,t}(o(0));s(o(2)),s(o(122));function s(e){return e&&e.__esModule?e:{default:e}}function n(e,t,o,a){r||(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var i=e&&e.defaultProps,s=arguments.length-3;if(t||0===s||(t={children:void 0}),t&&i)for(var n in i)void 0===t[n]&&(t[n]=i[n]);else t||(t=i||{});if(1===s)t.children=a;else if(s>1){for(var l=new Array(s),m=0;m<s;m++)l[m]=arguments[m+3];t.children=l}return{$$typeof:r,type:e,key:void 0===o?null:""+o,ref:null,props:t,_owner:null}}function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var o,r,a=function(e,t){if(null==e)return{};var o,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}const u=e=>{let{to:t}=e,o=c(e,["to"]);return t.includes("http")?i.default.createElement("a",m({},e,{href:t})):("#"===t[0]&&(t=a.default.join("/auto/","pages/plugins/log-parse-hooks.html")+t),i.default.createElement("a",m({},o,{href:t,onClick:o=>{if(o.preventDefault(),"#"===e.to)return!1;const r=new URL(a.default.join(window.location.origin,t));window.history.pushState((e=>({href:e.href,pathname:e.pathname,hash:e.hash,query:e.query}))(r),null,t),e.onClick();const i=new CustomEvent("changeLocation",{detail:r});return dispatchEvent(i),!1}})))};u.defaultProps={href:"",onClick:()=>{}};const d=e=>{var t,o;return o=t=class extends i.default.Component{constructor(...e){super(...e),l(this,"state",{Comp:null})}componentDidMount(){!this.state.Comp&&this.props.shouldLoad&&e().then(e=>{this.setState({Comp:e.default})})}render(){const{Comp:e}=this.state;return e?i.default.createElement(e,this.props,this.props.children||null):null}},l(t,"defaultProps",{shouldLoad:!0}),o};d(()=>o.e(32).then(o.bind(null,123))),d(()=>o.e(32).then(o.bind(null,124)));var p=n("h1",{},void 0,"Log Parser Hooks"),h=n("p",{},void 0,"The core of ",n("code",{},void 0,"auto")," is built around parsing information from the output of ",n("code",{},void 0,"git log")," in your repository. We take that output and iterate over it to extract information from the commits. The construct that does that work is the ",n("code",{},void 0,"LogParse")," class."),v=n("code",{},void 0,"LogParse"),f=n("code",{},void 0,"auto"),g=n("p",{},void 0,"This is where you hook into the log parser's hooks. See examples below."),b=n("p",{},void 0,"Parse information about a commit from a commit. Here is where ",n("code",{},void 0,"auto")," gets the PR number from the merge commits."),P=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.onCreateLogParse.tapPromise(",n("span",{className:"hljs-string"},void 0,"'Stars'"),", ",n("span",{className:"hljs-function"},void 0,n("span",{className:"hljs-params"},void 0,"logParse")," =>"),n("br",{}),"  logParse.hooks.parseCommit.tap(",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,"'test'"),",",n("br",{}),"    ",n("span",{className:"hljs-function"},void 0,"(",n("span",{className:"hljs-params"},void 0,"commit"),") =>")," {",n("br",{}),"      ",n("span",{className:"hljs-keyword"},void 0,"const")," bump = getBump(commit.subject, logParse.options.versionLabels);",n("br",{}),"      commit.labels = [bump]",n("br",{}),"      ",n("span",{className:"hljs-keyword"},void 0,"return")," commit;",n("br",{}),"    }",n("br",{}),"  );",n("br",{}),");",n("br",{}))),y=n("p",{},void 0,n("em",{},void 0,"Other examples:")),j=n("li",{},void 0,"In core:",n("ul",{},void 0,n("li",{},void 0,"Find PR number from commits message"),n("li",{},void 0,"Attaches labels from pull requests"),n("li",{},void 0,"Attaches GitHub author information"))),w=n("p",{},void 0,"Choose to omit certain commits. If you return true the commit will be omitted. Be sure to return nothing if you don't want the commit omitted."),k=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.onCreateLogParse.tapPromise(",n("span",{className:"hljs-string"},void 0,"'Stars'"),", ",n("span",{className:"hljs-function"},void 0,n("span",{className:"hljs-params"},void 0,"changelog")," =>"),n("br",{}),"  changelog.hooks.omitCommit.tap(",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,"'test'"),",",n("br",{}),"    ",n("span",{className:"hljs-function"},void 0,"(",n("span",{className:"hljs-params"},void 0,"commit"),") =>")," {",n("br",{}),"      ",n("span",{className:"hljs-keyword"},void 0,"if")," (someTest(commit.subject)) {",n("br",{}),"        ",n("span",{className:"hljs-keyword"},void 0,"return")," ",n("span",{className:"hljs-literal"},void 0,"true"),";",n("br",{}),"      }",n("br",{}),"    }",n("br",{}),"  );",n("br",{}),");",n("br",{}))),O=n("p",{},void 0,n("em",{},void 0,"Other examples:"));var N=e=>n("div",{className:e.className},void 0,n("section",{},void 0,p,h,n("p",{},void 0,"The ",v," class is involved in any command that interacts with the git log. You can use its hooks to attach information to the commit object (",n(u,{currentPage:e.currentPage,to:"#parsecommit"},void 0,"parseCommit"),") or make ",f," ignore commits entirely (",n(u,{currentPage:e.currentPage,to:"#omitcommit"},void 0,"omitCommit"),")."),n("ul",{},void 0,n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"#oncreatelogparse"},void 0,"onCreateLogParse")),n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"#parsecommit"},void 0,"parseCommit")),n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"#omitcommit"},void 0,"omitCommit"))),n("h2",{id:"oncreatelogparse"},void 0,"onCreateLogParse ",n(u,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#oncreatelogparse","aria-hidden":"true"})),g,n("h2",{id:"parsecommit"},void 0,"parseCommit ",n(u,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#parsecommit","aria-hidden":"true"})),b,P,y,n("ul",{},void 0,j,n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"/auto/plugins/conventional-commits/README.html"},void 0,"conventional-commits")," - Parse change types from commit messages")),n("h2",{id:"omitcommit"},void 0,"omitCommit ",n(u,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#omitcommit","aria-hidden":"true"})),w,k,O,n("ul",{},void 0,n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"/auto/plugins/gradle/README.html"},void 0,"gradle")," - Omit commits from the Gradle Release plugin"),n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"/auto/plugins/maven/README.html"},void 0,"maven")," - Omit commits from the Maven Release plugin"),n("li",{},void 0,n(u,{currentPage:e.currentPage,to:"/auto/plugins/omit-commit/README.html"},void 0,"omit-commit")," - Omit commits from authors, labels, and more"))));t.default=N,e.exports=t.default}}]);
//# sourceMappingURL=log-parse-hooks.js.map