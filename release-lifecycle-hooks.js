(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{96:function(e,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;var o,r=t(s(3)),i=function(e){if(e&&e.__esModule)return e;var a={};if(null!=e)for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,s):{};o.get||o.set?Object.defineProperty(a,s,o):a[s]=e[s]}return a.default=e,a}(s(0));t(s(2)),t(s(122));function t(e){return e&&e.__esModule?e:{default:e}}function n(e,a,s,r){o||(o="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var i=e&&e.defaultProps,t=arguments.length-3;if(a||0===t||(a={children:void 0}),a&&i)for(var n in i)void 0===a[n]&&(a[n]=i[n]);else a||(a=i||{});if(1===t)a.children=r;else if(t>1){for(var l=new Array(t),d=0;d<t;d++)l[d]=arguments[d+3];a.children=l}return{$$typeof:o,type:e,key:void 0===s?null:""+s,ref:null,props:a,_owner:null}}function l(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function d(){return(d=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var s=arguments[a];for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(e[o]=s[o])}return e}).apply(this,arguments)}function c(e,a){if(null==e)return{};var s,o,r=function(e,a){if(null==e)return{};var s,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)s=i[o],a.indexOf(s)>=0||(r[s]=e[s]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)s=i[o],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}const h=e=>{let{to:a}=e,s=c(e,["to"]);return a.includes("http")?i.default.createElement("a",d({},e,{href:a})):("#"===a[0]&&(a=r.default.join("/auto/","pages/plugins/release-lifecycle-hooks.html")+a),i.default.createElement("a",d({},s,{href:a,onClick:s=>{if(s.preventDefault(),"#"===e.to)return!1;const o=new URL(r.default.join(window.location.origin,a));window.history.pushState((e=>({href:e.href,pathname:e.pathname,hash:e.hash,query:e.query}))(o),null,a),e.onClick();const i=new CustomEvent("changeLocation",{detail:o});return dispatchEvent(i),!1}})))};h.defaultProps={href:"",onClick:()=>{}};const v=e=>{var a,s;return s=a=class extends i.default.Component{constructor(...e){super(...e),l(this,"state",{Comp:null})}componentDidMount(){!this.state.Comp&&this.props.shouldLoad&&e().then(e=>{this.setState({Comp:e.default})})}render(){const{Comp:e}=this.state;return e?i.default.createElement(e,this.props,this.props.children||null):null}},l(a,"defaultProps",{shouldLoad:!0}),s};v(()=>s.e(32).then(s.bind(null,123))),v(()=>s.e(32).then(s.bind(null,124)));var u=n("h1",{},void 0,"Release Lifecycle Hooks"),p=n("p",{},void 0,"The following hooks are all called during various release commands (ex: ",n("code",{},void 0,"latest"),", ",n("code",{},void 0,"next"),", ",n("code",{},void 0,"canary"),", ",n("code",{},void 0,"shipit"),"). These hooks is where the publishing of your package actually happens."),m=n("p",{},void 0,"Happens before ",n("code",{},void 0,"shipit")," is run. This is a great way to throw an error if a token or key is not present."),g=n("p",{},void 0,"Context Object:"),b=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"releaseType")," (",n("code",{},void 0,"latest")," | ",n("code",{},void 0,"old")," | ",n("code",{},void 0,"next")," | ",n("code",{},void 0,"canary"),") - The type of release ",n("code",{},void 0,"shipit")," will attempt to make.")),f=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.beforeShipIt.tapPromise(",n("span",{className:"hljs-string"},void 0,'"NPM"'),", ",n("span",{className:"hljs-keyword"},void 0,"async")," (context) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"if")," (!process.env.NPM_TOKEN) {",n("br",{}),"    ",n("span",{className:"hljs-keyword"},void 0,"throw")," ",n("span",{className:"hljs-keyword"},void 0,"new")," ",n("span",{className:"hljs-built_in"},void 0,"Error"),"(",n("span",{className:"hljs-string"},void 0,'"NPM Token is needed for the NPM plugin!"'),");",n("br",{}),"  }",n("br",{}),"});",n("br",{}))),y=n("p",{},void 0,n("em",{},void 0,"Other examples:")),N=n("code",{},void 0,"latest"),w=n("p",{},void 0,"Ran before the ",n("code",{},void 0,"changelog")," command commits the new release notes to ",n("code",{},void 0,"CHANGELOG.md"),". Useful for modifying the changelog as a whole or creating extra ",n("code",{},void 0,"changelog")," files. These files can be apart of the commit that updates the changelog."),P=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"bump")," - the semver bump"),n("li",{},void 0,n("code",{},void 0,"commits")," - the commits in the changelog"),n("li",{},void 0,n("code",{},void 0,"currentVersion")," - version that was just released"),n("li",{},void 0,n("code",{},void 0,"lastRelease")," - the version before the current version"),n("li",{},void 0,n("code",{},void 0,"releaseNotes")," - generated release notes for the release")),j=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.beforeCommitChangelog.tap(",n("br",{}),"  ",n("span",{className:"hljs-string"},void 0,'"MyPlugin"'),",",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"async")," ({ currentVersion, commits, releaseNotes, lastRelease }) => {",n("br",{}),"    ",n("span",{className:"hljs-comment"},void 0,"// do something"),n("br",{}),"  }",n("br",{}),");",n("br",{}))),k=n("p",{},void 0,n("em",{},void 0,"Other examples:")),x=n("li",{},void 0,"In Core: Create major version branches when ",n("code",{},void 0,"major")," happens"),R=n("p",{},void 0,"Ran after the ",n("code",{},void 0,"changelog")," command adds the new release notes to ",n("code",{},void 0,"CHANGELOG.md"),". Useful for getting extra commits into a release before publishing."),E=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"bump")," - the semver bump"),n("li",{},void 0,n("code",{},void 0,"commits")," - the commits in the changelog"),n("li",{},void 0,n("code",{},void 0,"currentVersion")," - version that was just released"),n("li",{},void 0,n("code",{},void 0,"lastRelease")," - the version before the current version"),n("li",{},void 0,n("code",{},void 0,"releaseNotes")," - generated release notes for the release")),C=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.afterAddToChangelog.tap(",n("br",{}),"  ",n("span",{className:"hljs-string"},void 0,'"MyPlugin"'),",",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"async")," ({ currentVersion, commits, releaseNotes, lastRelease }) => {",n("br",{}),"    ",n("span",{className:"hljs-comment"},void 0,"// do something"),n("br",{}),"  }",n("br",{}),");",n("br",{}))),M=n("p",{},void 0,n("em",{},void 0,"Other examples:")),V=n("p",{},void 0,"Increment the version the package. This is a good opportunity to ",n("code",{},void 0,"git tag")," the release also. This hooks is required for plugin that facilitate publishing."),O=n("p",{},void 0,"Here ",n("code",{},void 0,"npm")," does it for us."),T=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.version.tapPromise(",n("span",{className:"hljs-string"},void 0,'"NPM"'),", ",n("span",{className:"hljs-keyword"},void 0,"async")," (version: SEMVER) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"npm"'),", [",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"version"'),",",n("br",{}),"    version,",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"-m"'),",",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"Bump version to: %s [skip ci]"'),",",n("br",{}),"  ]);",n("br",{}),"});",n("br",{}))),L=n("blockquote",{},void 0,n("p",{},void 0,"If you're implementing this hook for a publishing plugin you ",n("strong",{},void 0,"must")," commit (with ",n("code",{},void 0,"[skip ci]")," in the message) and tag the version.")),D=n("p",{},void 0,"Ran after the package has been versioned."),A=n("p",{},void 0,n("em",{},void 0,"Examples:")),S=n("li",{},void 0,"In Core: Used to exit early is new commits are detected on the remote"),I=n("p",{},void 0,"Publish the package to some package distributor. You must push the tags to github! This hooks is required for plugin that facilitate publishing."),H=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.publish.tapPromise(",n("span",{className:"hljs-string"},void 0,'"NPM"'),", ",n("span",{className:"hljs-keyword"},void 0,"async")," (version: SEMVER) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"npm"'),", [",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"version"'),",",n("br",{}),"    version,",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"-m"'),",",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"Bump version to: %s [skip ci]"'),",",n("br",{}),"  ]);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"npm"'),", [",n("span",{className:"hljs-string"},void 0,'"publish"'),"]);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"git"'),", [",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"push"'),",",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"--follow-tags"'),",",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"--set-upstream"'),",",n("br",{}),"    auto.remote,",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"$branch"'),",",n("br",{}),"  ]);",n("br",{}),"});",n("br",{}))),U=n("p",{},void 0,"Ran after the package has been published."),_=n("p",{},void 0,"Used to publish a ",n("code",{},void 0,"canary")," release. In this hook you get the semver bump and the unique ",n("code",{},void 0,"canary")," postfix ID."),G=n("p",{},void 0,"You can either return a string value of just the version or an object containing the following which will be rendered within and HTML Details element."),$=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"newVersion")," - The version published in the ",n("code",{},void 0,"canary")," release or a header for the Details element."),n("li",{},void 0,n("code",{},void 0,"Details")," - The body of the Details element")),q=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.canary.tapPromise(",n("span",{className:"hljs-keyword"},void 0,"this"),".name, ",n("span",{className:"hljs-keyword"},void 0,"async")," (version, postFix) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," lastRelease = ",n("span",{className:"hljs-keyword"},void 0,"await")," auto.git!.getLatestRelease();",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," current = ",n("span",{className:"hljs-keyword"},void 0,"await")," auto.getCurrentVersion(lastRelease);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," nextVersion = inc(current, version ",n("span",{className:"hljs-keyword"},void 0,"as")," ReleaseType);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," isScopedPackage = name.match(",n("span",{className:"hljs-regexp"},void 0,"/@\\S+\\/\\S+/"),");",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," canaryVersion = `${nextVersion}-canary${postFix}`;",n("br",{}),n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"npm"'),", [",n("span",{className:"hljs-string"},void 0,'"version"'),", canaryVersion, ",n("span",{className:"hljs-string"},void 0,'"--no-git-tag-version"'),"]);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"npm"'),", [",n("span",{className:"hljs-string"},void 0,'"publish"'),", ",n("span",{className:"hljs-string"},void 0,'"--tag"'),", ",n("span",{className:"hljs-string"},void 0,'"canary"'),"]);",n("br",{}),n("br",{}),"  auto.logger.verbose.info(",n("span",{className:"hljs-string"},void 0,'"Successfully published canary version"'),");",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"return")," canaryVersion;",n("br",{}),"});",n("br",{}))),B=n("p",{},void 0,n("code",{},void 0,"canary")," version should not produce any of the following:"),F=n("ul",{},void 0,n("li",{},void 0,"a new tag"),n("li",{},void 0,"any commits"),n("li",{},void 0,"a new release"),n("li",{},void 0,"any changes to changelogs")),J=n("p",{},void 0,'It is "test" release and has no impact on any of your real releases.'),W=n("p",{},void 0,"Used to publish a ",n("code",{},void 0,"next")," release. In this hook you get the semver bump and a list of all pre-releases made."),Y=n("p",{},void 0,"This hook ",n("strong",{},void 0,"must")," add the version it published to ",n("code",{},void 0,"preReleaseVersions")," and return it."),K=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"preReleaseVersions")," - A list of prerelease version publish during the current run"),n("li",{},void 0,n("code",{},void 0,"bump")," - The version bump to apply")),z=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,n("span",{className:"hljs-keyword"},void 0,"import")," {",n("br",{}),"  determineNextVersion,",n("br",{}),"  execPromise,",n("br",{}),"  getCurrentBranch,",n("br",{}),"} ",n("span",{className:"hljs-keyword"},void 0,"from")," ",n("span",{className:"hljs-string"},void 0,'"@auto-it/core"'),";",n("br",{}),n("br",{}),"auto.hooks.next.tapPromise(",n("span",{className:"hljs-keyword"},void 0,"this"),".name, ",n("span",{className:"hljs-keyword"},void 0,"async")," (preReleaseVersions, bump) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," branch = getCurrentBranch() || ",n("span",{className:"hljs-string"},void 0,'""'),";",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," lastRelease = ",n("span",{className:"hljs-keyword"},void 0,"await")," auto.git.getLatestRelease();",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," current =",n("br",{}),"    (",n("span",{className:"hljs-keyword"},void 0,"await")," auto.git.getLastTagNotInBaseBranch(branch)) ||",n("br",{}),"    (",n("span",{className:"hljs-keyword"},void 0,"await")," auto.getCurrentVersion(lastRelease));",n("br",{}),"  ",n("span",{className:"hljs-comment"},void 0,"// Use this helper function to determine the next prerelease version"),n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"const")," prerelease = determineNextVersion(lastRelease, current, bump, ",n("span",{className:"hljs-string"},void 0,'"next"'),");",n("br",{}),n("br",{}),"  ",n("span",{className:"hljs-comment"},void 0,"// Create a new tag for it"),n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"git"'),", [",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"tag"'),",",n("br",{}),"    prerelease,",n("br",{}),"    ",n("span",{className:"hljs-string"},void 0,'"-m"'),",",n("br",{}),"    `",n("span",{className:"hljs-string"},void 0,'"Tag pre-release: ${prerelease}"'),"`,",n("br",{}),"  ]);",n("br",{}),"  ",n("span",{className:"hljs-comment"},void 0,"// Push the tag"),n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"await")," execPromise(",n("span",{className:"hljs-string"},void 0,'"git"'),", [",n("span",{className:"hljs-string"},void 0,'"push"'),", auto.remote, ",n("span",{className:"hljs-string"},void 0,'"--tags"'),"]);",n("br",{}),n("br",{}),"  ",n("span",{className:"hljs-comment"},void 0,"// Make sure to add the version to the list"),n("br",{}),"  preReleaseVersions.push(prerelease);",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"return")," preReleaseVersions;",n("br",{}),"});",n("br",{}))),Q=n("p",{},void 0,n("code",{},void 0,"next")," version should not produce any of the following:"),X=n("ul",{},void 0,n("li",{},void 0,"any commits"),n("li",{},void 0,"any changes to changelogs")),Z=n("p",{},void 0,"Ran when trying to make a release during the ",n("code",{},void 0,"release")," command has run. This async hook gets the following arguments:"),ee=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"dryRun")," - Whether this is a dry run"),n("li",{},void 0,n("code",{},void 0,"from")," - Commit to start calculating the version from"),n("li",{},void 0,n("code",{},void 0,"newVersion")," - The version being released"),n("li",{},void 0,n("code",{},void 0,"isPrerelease")," - Whether the release being made is a prerelease"),n("li",{},void 0,n("code",{},void 0,"fullReleaseNotes")," - The generated release notes for all of the commits"),n("li",{},void 0,n("code",{},void 0,"commits")," - The commits included in the release")),ae=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.makeRelease.tapPromise(",n("span",{className:"hljs-string"},void 0,'"MyPlugin"'),", ",n("span",{className:"hljs-keyword"},void 0,"async")," (options) => {",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"if")," (!options.dryRun) {",n("br",{}),"    ",n("span",{className:"hljs-keyword"},void 0,"this"),".logger.log.info(`Releasing ${options.newVersion} to GitHub.`);",n("br",{}),n("br",{}),"    ",n("span",{className:"hljs-keyword"},void 0,"return")," ",n("span",{className:"hljs-keyword"},void 0,"this"),".git!.publish(",n("br",{}),"      options.fullReleaseNotes,",n("br",{}),"      options.newVersion,",n("br",{}),"      options.isPrerelease",n("br",{}),"    );",n("br",{}),"  }",n("br",{}),"});",n("br",{}))),se=n("p",{},void 0,n("em",{},void 0,"Other examples:")),oe=n("p",{},void 0,"Ran after the ",n("code",{},void 0,"release")," command has run, creating a new release on GitHub. This async hook gets the following arguments:"),re=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"lastVersion")," - the version that existed prior to the current release"),n("li",{},void 0,n("code",{},void 0,"nextVersion")," - version that was just released"),n("li",{},void 0,n("code",{},void 0,"commits")," - the commits in the release"),n("li",{},void 0,n("code",{},void 0,"releaseNotes")," - generated release notes for the release"),n("li",{},void 0,n("code",{},void 0,"response")," - the response returned from making the release")),ie=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.afterRelease.tapPromise(",n("br",{}),"  ",n("span",{className:"hljs-string"},void 0,'"MyPlugin"'),",",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"async")," ({ lastVersion, nextVersion, commits, releaseNotes, response }) => {",n("br",{}),"    ",n("span",{className:"hljs-comment"},void 0,"// do something"),n("br",{}),"  }",n("br",{}),");",n("br",{}))),te=n("p",{},void 0,n("em",{},void 0,"Other examples:")),ne=n("p",{},void 0,"Ran after the ",n("code",{},void 0,"shipit")," command has run."),le=n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"newVersion")," - The new version that was release"),n("li",{},void 0,n("code",{},void 0,"commits")," - the commits in the release"),n("li",{},void 0,n("code",{},void 0,"data"),n("ul",{},void 0,n("li",{},void 0,n("code",{},void 0,"context")," - The type of release that was created (",n("code",{},void 0,"latest"),", ",n("code",{},void 0,"next"),", ",n("code",{},void 0,"canary"),", or ",n("code",{},void 0,"old"),")")))),de=n("pre",{},void 0,n("code",{className:"language-ts"},void 0,"auto.hooks.afterShipIt.tap(",n("br",{}),"  ",n("span",{className:"hljs-string"},void 0,'"MyPlugin"'),",",n("br",{}),"  ",n("span",{className:"hljs-keyword"},void 0,"async")," (newVersion, commits, { context }) => {",n("br",{}),"    ",n("span",{className:"hljs-comment"},void 0,"// do something"),n("br",{}),"  }",n("br",{}),");",n("br",{}))),ce=n("p",{},void 0,n("em",{},void 0,"Other examples:"));var he=e=>n("div",{className:e.className},void 0,n("section",{},void 0,u,p,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#beforeshipit"},void 0,"beforeShipIt")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#beforecommitchangelog"},void 0,"beforeCommitChangelog")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#afteraddtochangelog"},void 0,"afterAddToChangelog")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#version"},void 0,"version")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#afterversion"},void 0,"afterVersion")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#publish"},void 0,"publish")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#afterpublish"},void 0,"afterPublish")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#canary"},void 0,"canary")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#next"},void 0,"next")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#makerelease"},void 0,"makeRelease")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#afterrelease"},void 0,"afterRelease")),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"#aftershipit"},void 0,"afterShipIt"))),n("h2",{id:"beforeshipit"},void 0,"beforeShipIt ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#beforeshipit","aria-hidden":"true"})),m,g,b,f,y,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/all-contributors/README.html"},void 0,"all-contributors")," - Manage manual contribution additions in PRs"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/gh-pages/README.html"},void 0,"gh-pages")," - Publishes your docs to GitHub pages on a ",N," release"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/npm/README.html"},void 0,"npm")," - Exits early when lerna won't need to make a release")),n("h2",{id:"beforecommitchangelog"},void 0,"beforeCommitChangelog ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#beforecommitchangelog","aria-hidden":"true"})),w,P,j,k,n("ul",{},void 0,x,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/npm/README.html"},void 0,"npm")," - Create sub-package changelogs")),n("h2",{id:"afteraddtochangelog"},void 0,"afterAddToChangelog ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#afteraddtochangelog","aria-hidden":"true"})),R,E,C,M,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/all-contributors/README.html"},void 0,"all-contributors")," - Make a commit for new contributions")),n("h2",{id:"version"},void 0,"version ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#version","aria-hidden":"true"})),V,O,T,L,n("h2",{id:"afterversion"},void 0,"afterVersion ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#afterversion","aria-hidden":"true"})),D,A,n("ul",{},void 0,S,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/brew/README.html"},void 0,"brew")," - Create a new brew formula once the package a=has been versioned")),n("h2",{id:"publish"},void 0,"publish ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#publish","aria-hidden":"true"})),I,H,n("h2",{id:"afterpublish"},void 0,"afterPublish ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#afterpublish","aria-hidden":"true"})),U,n("h2",{id:"canary"},void 0,"canary ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#canary","aria-hidden":"true"})),_,G,$,q,B,F,J,n("h2",{id:"next"},void 0,"next ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#next","aria-hidden":"true"})),W,Y,K,z,Q,X,n("h2",{id:"makerelease"},void 0,"makeRelease ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#makerelease","aria-hidden":"true"})),Z,ee,ae,se,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/npm/README.html"},void 0,"npm")," - Create GitHub releases for sub-packages")),n("h2",{id:"afterrelease"},void 0,"afterRelease ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#afterrelease","aria-hidden":"true"})),oe,re,ie,te,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/release/README.html"},void 0,"release")," - Post comment on issues and PRs about release version"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/s3/README.html"},void 0,"s3")," - Upload release assets to s3"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/slack/README.html"},void 0,"slack")," - Post the release notes to slack"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/twitter/README.html"},void 0,"twitter")," - Create a tweet about the new release"),n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/upload-assets/README.html"},void 0,"upload-assets")," - Uses hook to upload files to newly created release")),n("h2",{id:"aftershipit"},void 0,"afterShipIt ",n(h,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#aftershipit","aria-hidden":"true"})),ne,le,de,ce,n("ul",{},void 0,n("li",{},void 0,n(h,{currentPage:e.currentPage,to:"/auto/plugins/gradle/README.html"},void 0,"gradle")," - Uses hook to setup next snapshot version"))));a.default=he,e.exports=a.default}}]);
//# sourceMappingURL=release-lifecycle-hooks.js.map