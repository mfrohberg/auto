{"version":3,"sources":["webpack:///./docs/pages/plugins/log-parse-hooks.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","currentPage","_ref6","id","aria-hidden","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14"],"mappings":"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","file":"log-parse-hooks.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/plugins/log-parse-hooks.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Log Parser Hooks</h1>\n<p>The core of <code>auto</code> is built around parsing information from the output of <code>git log</code> in your repository.\nWe take that output and iterate over it to extract information from the commits.\nThe construct that does that work is the <code>LogParse</code> class.</p>\n<p>The <code>LogParse</code> class is involved in any command that interacts with the git log.\nYou can use its hooks to attach information to the commit object (<Link currentPage={(this && this.props || props).currentPage} to=\"#parsecommit\">parseCommit</Link>) or make <code>auto</code> ignore commits entirely (<Link currentPage={(this && this.props || props).currentPage} to=\"#omitcommit\">omitCommit</Link>).</p>\n<ul>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"#oncreatelogparse\">onCreateLogParse</Link></li>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"#parsecommit\">parseCommit</Link></li>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"#omitcommit\">omitCommit</Link></li>\n</ul>\n<h2 id=\"oncreatelogparse\">onCreateLogParse <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#oncreatelogparse\" aria-hidden=\"true\"></Link></h2>\n<p>This is where you hook into the log parser's hooks.\nSee examples below.</p>\n<h2 id=\"parsecommit\">parseCommit <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#parsecommit\" aria-hidden=\"true\"></Link></h2>\n<p>Parse information about a commit from a commit.\nHere is where <code>auto</code> gets the PR number from the merge commits.</p>\n<pre><code className=\"language-ts\">auto.hooks.onCreateLogParse.tapPromise(<span className=\"hljs-string\">'Stars'</span>, <span className=\"hljs-function\"><span className=\"hljs-params\">logParse</span> =&gt;</span><br />  logParse.hooks.parseCommit.tap(<br />    <span className=\"hljs-string\">'test'</span>,<br />    <span className=\"hljs-function\">(<span className=\"hljs-params\">commit</span>) =&gt;</span> &#123;<br />      <span className=\"hljs-keyword\">const</span> bump = getBump(commit.subject, logParse.options.versionLabels);<br />      commit.labels = [bump]<br />      <span className=\"hljs-keyword\">return</span> commit;<br />    &#125;<br />  );<br />);<br /></code></pre>\n<p><em>Other examples:</em></p>\n<ul>\n<li>In core:\n<ul>\n<li>Find PR number from commits message</li>\n<li>Attaches labels from pull requests</li>\n<li>Attaches GitHub author information</li>\n</ul>\n</li>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"/auto/plugins/conventional-commits/README.html\">conventional-commits</Link> - Parse change types from commit messages</li>\n</ul>\n<h2 id=\"omitcommit\">omitCommit <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#omitcommit\" aria-hidden=\"true\"></Link></h2>\n<p>Choose to omit certain commits.\nIf you return true the commit will be omitted.\nBe sure to return nothing if you don't want the commit omitted.</p>\n<pre><code className=\"language-ts\">auto.hooks.onCreateLogParse.tapPromise(<span className=\"hljs-string\">'Stars'</span>, <span className=\"hljs-function\"><span className=\"hljs-params\">changelog</span> =&gt;</span><br />  changelog.hooks.omitCommit.tap(<br />    <span className=\"hljs-string\">'test'</span>,<br />    <span className=\"hljs-function\">(<span className=\"hljs-params\">commit</span>) =&gt;</span> &#123;<br />      <span className=\"hljs-keyword\">if</span> (someTest(commit.subject)) &#123;<br />        <span className=\"hljs-keyword\">return</span> <span className=\"hljs-literal\">true</span>;<br />      &#125;<br />    &#125;<br />  );<br />);<br /></code></pre>\n<p><em>Other examples:</em></p>\n<ul>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"/auto/plugins/gradle/README.html\">gradle</Link> - Omit commits from the Gradle Release plugin</li>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"/auto/plugins/maven/README.html\">maven</Link> - Omit commits from the Maven Release plugin</li>\n<li><Link currentPage={(this && this.props || props).currentPage} to=\"/auto/plugins/omit-commit/README.html\">omit-commit</Link> - Omit commits from authors, labels, and more</li>\n</ul>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}