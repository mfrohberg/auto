(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{91:function(e,a,o){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;var t,n=s(o(3)),r=function(e){if(e&&e.__esModule)return e;var a={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var t=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};t.get||t.set?Object.defineProperty(a,o,t):a[o]=e[o]}return a.default=e,a}(o(0));s(o(2)),s(o(122));function s(e){return e&&e.__esModule?e:{default:e}}function i(e,a,o,n){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var r=e&&e.defaultProps,s=arguments.length-3;if(a||0===s||(a={children:void 0}),a&&r)for(var i in r)void 0===a[i]&&(a[i]=r[i]);else a||(a=r||{});if(1===s)a.children=n;else if(s>1){for(var l=new Array(s),h=0;h<s;h++)l[h]=arguments[h+3];a.children=l}return{$$typeof:t,type:e,key:void 0===o?null:""+o,ref:null,props:a,_owner:null}}function l(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function h(){return(h=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var o=arguments[a];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function d(e,a){if(null==e)return{};var o,t,n=function(e,a){if(null==e)return{};var o,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||(n[o]=e[o]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}const c=e=>{let{to:a}=e,o=d(e,["to"]);return a.includes("http")?r.default.createElement("a",h({},e,{href:a})):("#"===a[0]&&(a=n.default.join("/auto/","pages/plugins/changelog-hooks.html")+a),r.default.createElement("a",h({},o,{href:a,onClick:o=>{if(o.preventDefault(),"#"===e.to)return!1;const t=new URL(n.default.join(window.location.origin,a));window.history.pushState((e=>({href:e.href,pathname:e.pathname,hash:e.hash,query:e.query}))(t),null,a),e.onClick();const r=new CustomEvent("changeLocation",{detail:t});return dispatchEvent(r),!1}})))};c.defaultProps={href:"",onClick:()=>{}};const g=e=>{var a,o;return o=a=class extends r.default.Component{constructor(...e){super(...e),l(this,"state",{Comp:null})}componentDidMount(){!this.state.Comp&&this.props.shouldLoad&&e().then(e=>{this.setState({Comp:e.default})})}render(){const{Comp:e}=this.state;return e?r.default.createElement(e,this.props,this.props.children||null):null}},l(a,"defaultProps",{shouldLoad:!0}),o};g(()=>o.e(32).then(o.bind(null,123))),g(()=>o.e(32).then(o.bind(null,124)));var u=i("h1",{},void 0,"Changelog Hooks"),p=i("code",{},void 0,"auto"),m=i("p",{},void 0,"This is where you hook into the changelog's hooks. See examples below."),v=i("p",{},void 0,'Add extra content to your changelogs. This hook provide all the current "extra" notes and all of the commits for the changelog. You must return the notes array.'),f=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tapPromise(",i("span",{className:"hljs-string"},void 0,"'Giphy'"),", ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"changelog")," =>"),i("br",{}),"  changelog.hooks.renderChangelogLine.tapPromise(",i("br",{}),"    ",i("span",{className:"hljs-string"},void 0,"'Giphy'"),",",i("br",{}),"    ",i("span",{className:"hljs-keyword"},void 0,"async")," (notes, commits) => {",i("br",{}),"      ",i("span",{className:"hljs-keyword"},void 0,"const")," response = ",i("span",{className:"hljs-keyword"},void 0,"await")," fetch(`https:",i("span",{className:"hljs-comment"},void 0,"//api.giphy.com/v1/gifs/random?api_key=${process.env.GIPHY_KEY}`);"),i("br",{}),"      ",i("span",{className:"hljs-keyword"},void 0,"const")," json = ",i("span",{className:"hljs-keyword"},void 0,"await")," response.json();",i("br",{}),"      ",i("span",{className:"hljs-keyword"},void 0,"const")," { data: gif } = json;",i("br",{}),i("br",{}),"      ",i("span",{className:"hljs-keyword"},void 0,"return")," [...notes, `![${gif.title}](${gif.url})\\n`]",i("br",{}),"    }",i("br",{}),"  );",i("br",{}),");",i("br",{}))),b=i("p",{},void 0,i("em",{},void 0,"Other examples:")),j=i("p",{},void 0,"Change how the changelog renders lines. This hook provides the commit and the current state of the line render. You must return the commit and the line string state as a tuple ([commit, line])."),N=i("p",{},void 0,"The following plugin would change all the bullet points in the changelog to star emojis."),P=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tapPromise(",i("span",{className:"hljs-string"},void 0,"'Stars'"),", ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"changelog")," =>"),i("br",{}),"  changelog.hooks.renderChangelogLine.tapPromise(",i("br",{}),"    ",i("span",{className:"hljs-string"},void 0,"'Stars'"),",",i("br",{}),"    ",i("span",{className:"hljs-keyword"},void 0,"async")," (commit, line) =>",i("br",{}),"      [commit, `${line.replace(",i("span",{className:"hljs-string"},void 0,"'-'"),", ",i("span",{className:"hljs-string"},void 0,"':star:'"),")}\\n`]",i("br",{}),"  );",i("br",{}),");",i("br",{}))),y=i("p",{},void 0,i("em",{},void 0,"Other examples:")),k=i("p",{},void 0,"Change how the changelog renders titles. The hook provides the current label for the section and all the configured changelog titles."),w=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tapPromise(",i("span",{className:"hljs-string"},void 0,"'Stars'"),", ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"changelog")," =>"),i("br",{}),"  changelog.hooks.renderChangelogTitle.tap(",i("br",{}),"    ",i("span",{className:"hljs-string"},void 0,"'My Titles'"),",",i("br",{}),"    ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"label, changelogTitles"),") =>")," `:heart: ${changelogTitles[label]} :heart:`",i("br",{}),"  );",i("br",{}),");",i("br",{}))),C=i("p",{},void 0,"Change how the changelog renders author accounts (ex: linking to GitHub accounts). This is both the author on each commit note and the user in the author section (the part between parentheses). This is generally a link to some profile."),O=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tapPromise(",i("span",{className:"hljs-string"},void 0,"'Stars'"),", ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"changelog")," =>"),i("br",{}),"  changelog.hooks.renderChangelogAuthor.tap(",i("br",{}),"    ",i("span",{className:"hljs-string"},void 0,"'test'"),",",i("br",{}),"    ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"author, commit"),") =>")," `:heart: ${author.name}/${commit.authorEmail} :heart:`",i("br",{}),"  );",i("br",{}),");",i("br",{}))),T=i("p",{},void 0,"Change how the changelog renders each line in the authors section. The hook provides the author object and the user created with ",i("code",{},void 0,"renderChangelogAuthor"),". Here is where you might display extra info about the author, such as their full name."),L=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tapPromise(",i("span",{className:"hljs-string"},void 0,"'Stars'"),", ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"changelog")," =>"),i("br",{}),"  changelog.hooks.renderChangelogAuthorLine.tap(",i("br",{}),"    ",i("span",{className:"hljs-string"},void 0,"'test'"),",",i("br",{}),"    ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"author, user"),") =>")," `:shipit: ${author.name} (${user})\\n`",i("br",{}),"  );",i("br",{}),");",i("br",{}))),E=i("p",{},void 0,"Control the titles in the ",i("code",{},void 0,"CHANGELOG.md")),A=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,i("span",{className:"hljs-comment"},void 0,"// Render only the date in the title"),i("br",{}),"auto.hooks.onCreateRelease.tap(",i("span",{className:"hljs-keyword"},void 0,"this"),".name, ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"release"),") =>")," {",i("br",{}),"  release.hooks.createChangelogTitle.tap(",i("br",{}),"    `${",i("span",{className:"hljs-keyword"},void 0,"this"),".name} - lerna independent`,",i("br",{}),"    ",i("span",{className:"hljs-function"},void 0,i("span",{className:"hljs-params"},void 0,"()")," =>")," ",i("span",{className:"hljs-string"},void 0,'""'),i("br",{}),"  );",i("br",{}),"});",i("br",{}))),R=i("p",{},void 0,i("em",{},void 0,"Other examples:")),x=i("li",{},void 0,"In Core: Powers the ",i("code",{},void 0,"auto changelog --title")," flag"),S=i("p",{},void 0,"Control what commits get into the additional release notes section."),$=i("pre",{},void 0,i("code",{className:"language-ts"},void 0,"auto.hooks.onCreateChangelog.tap(",i("span",{className:"hljs-keyword"},void 0,"this"),".name, ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"changelog"),") =>")," {",i("br",{}),"  changelog.hooks.omitReleaseNotes.tap(",i("span",{className:"hljs-keyword"},void 0,"this"),".name, ",i("span",{className:"hljs-function"},void 0,"(",i("span",{className:"hljs-params"},void 0,"commit"),") =>"),i("br",{}),"    commit.subject.includes(",i("span",{className:"hljs-string"},void 0,'"WIP"'),")",i("br",{}),"  );",i("br",{}),"});",i("br",{}))),M=i("p",{},void 0,i("em",{},void 0,"Other examples:")),_=i("li",{},void 0,"In Core: Ignore release notes in PRs from common bot accounts");var D=e=>i("div",{className:e.className},void 0,i("section",{},void 0,u,i("p",{},void 0,"One of the main outputs from ",p," is the changelogs it produces. The changelog is created from a set of commits that has been parsed using the ",i(c,{currentPage:e.currentPage,to:"/auto/pages/plugins/log-parse.html"},void 0,"log parser"),". The hooks it provides allow you to customize everything about how the changelog renders."),i("ul",{},void 0,i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#oncreatechangelog"},void 0,"onCreateChangelog")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#addtobody"},void 0,"addToBody")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#renderchangelogline"},void 0,"renderChangelogLine")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#renderchangelogtitle"},void 0,"renderChangelogTitle")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#renderchangelogauthor"},void 0,"renderChangelogAuthor")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#renderchangelogauthorline"},void 0,"renderChangelogAuthorLine")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#createchangelogtitle"},void 0,"createChangelogTitle")),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"#omitreleasenotes"},void 0,"omitReleaseNotes"))),i("h2",{id:"oncreatechangelog"},void 0,"onCreateChangelog ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#oncreatechangelog","aria-hidden":"true"})),m,i("h2",{id:"addtobody"},void 0,"addToBody ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#addtobody","aria-hidden":"true"})),v,i("p",{},void 0,"The following adds a random GIF from ",i(c,{currentPage:e.currentPage,target:"_blank",to:"https://giphy.com",className:"external-link"},void 0,"giphy")," to each new changelog."),f,b,i("ul",{},void 0,i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"/auto/plugins/first-time-contributor/README.html"},void 0,"first-time-contributor")," - Add new contributor announcements to changelogs")),i("h2",{id:"renderchangelogline"},void 0,"renderChangelogLine ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#renderchangelogline","aria-hidden":"true"})),j,N,P,y,i("ul",{},void 0,i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"/auto/plugins/jira/README.html"},void 0,"jira")," - Render JIRA story information in the changelog"),i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"/auto/plugins/npm/README.html"},void 0,"npm")," - Render monorepo information in the changelog")),i("h2",{id:"renderchangelogtitle"},void 0,"renderChangelogTitle ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#renderchangelogtitle","aria-hidden":"true"})),k,w,i("h2",{id:"renderchangelogauthor"},void 0,"renderChangelogAuthor ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#renderchangelogauthor","aria-hidden":"true"})),C,O,i("h2",{id:"renderchangelogauthorline"},void 0,"renderChangelogAuthorLine ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#renderchangelogauthorline","aria-hidden":"true"})),T,L,i("h2",{id:"createchangelogtitle"},void 0,"createChangelogTitle ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#createchangelogtitle","aria-hidden":"true"})),E,A,R,i("ul",{},void 0,x,i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"/auto/plugins/npm/README.html"},void 0,"npm")," - Gives independent monorepo a different title")),i("h2",{id:"omitreleasenotes"},void 0,"omitReleaseNotes ",i(c,{currentPage:e.currentPage,className:"fas fa-hashtag headerLink",to:"#omitreleasenotes","aria-hidden":"true"})),S,$,M,i("ul",{},void 0,_,i("li",{},void 0,i(c,{currentPage:e.currentPage,to:"/auto/plugins/omit-release-notes/README.html"},void 0,"omit-release-notes")," - Omit release notes from authors, labels, and more"))));a.default=D,e.exports=a.default}}]);
//# sourceMappingURL=changelog-hooks.js.map